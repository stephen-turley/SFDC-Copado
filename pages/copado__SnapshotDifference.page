<apex:page showHeader="true" sidebar="false" docType="html-5.0" standardController="copado__Snapshot_Difference__c" extensions="copado.snapshotDifferenceExtension,copado.Settings">
    
    <head>
        <c:GAnalytics />
        <c:WizardUtils />
        <apex:stylesheet value="{!URLFOR($Resource.copado__jqx,'jqwidgets/styles/jqx.base.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.copado__Statics,'css/wizard.css')}" />
        
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics, 'js/Cometd.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics,'js/libs/jquery.min.1.10.2.js')}" />
        
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics, 'js/json2.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics, 'js/jquery.cometd.js')}"/>
        
        <apex:includeScript value="{!URLFOR($Resource.copado__jqx,'jqwidgets/jqx-all.js')}" />

        <script type="text/javascript">
            var $copado = jQuery.noConflict(), 
            __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        <script src="/soap/ajax/32.0/connection.js"></script>

        <apex:includeScript value="{!URLFOR($Resource.copado__Statics,'js/copadoStreamingService.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics,'js/statusManager.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.copado__Statics, 'js/utilsV2.js')}"/>
        <script type="text/javascript" src="{!URLFOR($Resource.Statics,'js/jszip.js')}" />
        
        <apex:stylesheet value="{!URLFOR($Resource.copado__Statics,'css/DiffView.css')}" />
        <script type="text/javascript" src="{!URLFOR($Resource.Statics,'js/difflib.js')}" />
        <script type="text/javascript" src="{!URLFOR($Resource.Statics,'js/diffview.js')}" />
        <script type="text/javascript" src="{!URLFOR($Resource.Statics,'js/utils.js')}" />

        <!--c:TempJS /-->

        <script type="text/javascript"> 
            function openLookup(baseURL, width, modified, searchParam){
                var originalbaseURL = baseURL;
                var originalwidth = width;
                var originalmodified = modified;
                var originalsearchParam = searchParam;
            
                var lookupType = baseURL.substr(baseURL.length-3, 3);
                if(modified == '1') baseURL = baseURL + searchParam;
            
                var isCustomLookup = false;
        
                if(lookupType == "{!keyPrefix}"){
                    var urlArr = baseURL.split("&");
                    var txtId = '';
                    if(urlArr.length > 2) {
                        urlArr = urlArr[1].split('=');
                        txtId = urlArr[1];
                    }
                    baseURL = "/apex/GitCommitLookup?mode=GitOrgCommit&txt=" + txtId;
                    baseURL = baseURL + "&frm=" + encodeURI("{!$Component.theForm}");
                    if (modified == '1') {
                        baseURL = baseURL;
                    }
            
                    if(txtId.indexOf('sourceCommit') > -1 || txtId.indexOf('destinationCommit') > -1){
                        isCustomLookup = true;
                    }
                }
        
                if(isCustomLookup == true){
                    openPopup(baseURL, "lookup", 1000, 530, "width=1000,height=530,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
                }
                else {
                    if (modified == '1') originalbaseURL = originalbaseURL + originalsearchParam;
                    openPopup(originalbaseURL, "lookup", 400, 480, "width=400,height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
                }
            }
        </script>
        
        <style type="text/css">
        .js-show-diff{
            float: right;
            margin-right: 10px;
            color: blue !important;
            text-decoration: underline;
        }
        </style>

    <script type="text/javascript">
    /**
     * Handler app for Snapshot_Difference__c UI
     * @type {Object}
     */
    var copadoApp = {
        ns: '{!namespace}',
        data: { 
            selectedNames:[], 
            FILENAME_TO_SAVE: 'index.json'
        },
        
        updateDeepDiff: function(lastRun){
            var sd = new sforce.SObject(copadoApp.ns+"Snapshot_Difference__c");
            sd.Id = copadoApp.data.Id;
            sd[copadoApp.ns+'Last_Run__c'] = lastRun;
            result = sforce.connection.update([sd]);
            if (result[0].getBoolean("success")) {
                console.info('Last Run time successfully updated.');
            }
            else{
                console.error('Last Run time could not be updated.');
            }
        },

        /**
         * browse on grid datasource and filter only selected
         * @return {[type]} [description]
         */
        getSelectedItems: function(){

            return  copadoApp.data.index;

            //this is only used if we need to filter by selected
            var me = copadoApp, 
            data = me.data.index, 
            len = data.length;
            me.data.selectedNames = [];
            
            while(len--){
                data[len].s && me.data.selectedNames.push({f:data[len].f,d:data[len].d,s:true});
            }

            return me.data.selectedNames;
         
        },

        /**
         * get selected elements from grid and save in index.json attachment
         * @return {[type]} [description]
         */
        saveGrid: function(ev){

            ev.stopPropagation();
            var me = copadoApp;

            //get selected from grid
            var obj = me.getSelectedItems();

            if(!obj.length){
                alert('Select first at least one item to save.');
                return false;
            }
            //save file 
            dw.u.upsertAttach(me.data.Id, me.data.FILENAME_TO_SAVE,  JSON.stringify(obj));
            alert('The selected data has been saved.');
            return false;
        },

        /**
         * Render metadata grid using saved index file
         * @param  {[type]} res [description]
         * @return {[type]}     [description]
         */
        renderFileList: function(res){
            $copado('#sectionDiv').show();

            var me = copadoApp;

            me.data.index = res;

            var source2 = {
                localdata: res,
                datafields: [
                    { name: 's', type: 'bool' },
                    { name: 'f', type: 'string' },
                    { name: 'd', type: 'string' }
                ],
                datatype: 'array',
                updaterow: function (rowid, rowdata, commit) {
                    commit(true);
                    me.data.index[rowid] = rowdata;
                    copadoApp.dirty = true;
                }
            },

            //adapter wrapper
            dataAdapter2 = new $copado.jqx.dataAdapter(source2),
            
            //keep jquery pointer for performance query
            $grid2 = $copado('<div>');
            
            $copado('#fileGrid').html($grid2);

            /**
             * Helper to colored status cell by status
             * @param  {[type]} row         [description]
             * @param  {[type]} column      [description]
             * @param  {[type]} value       [description]
             * @param  {[type]} defaultHtml [description]
             * @return {[type]}             [description]
             */
            var cellsrenderer = function (row, column, value, defaultHtml) {

                var color = false;
                if (value == 'delete' ) {
                  color = '#FFC6C6';
                }else if (value == 'update' ) {
                  color = '#FFFFE3';
                }else if (value == 'create'){
                  color = '#CCFFCC'
                } 

                if(color){
                  var element = $copado(defaultHtml);
                  element.css({ 'background-color': color, 'text-align': 'center'});
                  return element[0].outerHTML;
                }
                return defaultHtml;
            };

            /**
             * [cellsrendererView ]
             *  Helper to render show detail link on update row's
             */
            var cellsrendererView = function (row, column, value, defaultHtml) {


                if(me.data.index[row].d == 'update'){
                  var element = $copado(defaultHtml );
                  element.append('<a class=js-show-diff > Show Diff </a>');
                  element.css({ 'cursor': 'pointer'});
                  return element[0].outerHTML;
                }
                return defaultHtml;
            };
            
            
            $grid2.jqxGrid({
                width: '100%',
                source: dataAdapter2,
                showfilterrow: true,
                filterable: true,
                theme: 'base',
                editable: true, 
                selectionmode: 'none',
                enablebrowserselection: true,
                pageable: true,
                pagesizeoptions: ['10', '20', '50','100','200','500'],
                pagesize: 50,
                sortable: true,
                columnsresize: true,
                autorowheight: true,
                autoheight: true,
                altrows: true,
                localization: localizationobj,
                columns: [
                  {text:copadoLabels.selected, columntype:'checkbox', filtertype:'bool', datafield:'s', width:60 },
                  {text:'{!$ObjectType.Step__c.Fields.Status__c.Label}', filtertype:'checkedlist', datafield:'d', width:120 ,cellsrenderer:cellsrenderer},
                  {text:copadoLabels.name, filtertype:'textbox', filtercondition:'contains', editable:false, datafield:'f', cellsrenderer:cellsrendererView}
                ]
            });
            unlockScreen();
        },
        runDeepDiff: function(){
            
            console.time('Retrieve');
            var herokuServer = '{!settings.herokuServer}';
            var uri = herokuServer+'/json/v1/snapshotDiff/'+copadoApp.data.Id+'{!settings.urlParameters}';
            console.log(herokuServer+' calling... '+uri);
            sforce.connection.remoteFunction({
                url : uri,
                requestHeaders: {
                        "Content-Type": "text/json",
                        "userId": _temp_conf.userId,
                        "orgId": _temp_conf.orgId,
                        "sessionId": _temp_conf.sessionId,
                        "token": _temp_conf.token
                },
                method: "GET",
                requestData: {},
                onSuccess: function(res){
                    console.log(res);
                    var obj = (res!=null)?JSON.parse(res):[];
                    if(obj.status && obj.status=='done'){
                        unlockScreen();
                    }
                    else{
                        lockScreen();
                    }
                    statusManager.readStatusFromResponse(res);
                },
                onFailure: function(response) {
                    console.log('Failed: Response was: ', response);
                    unlockScreen();
                },
                timeout: 25000
            });
        },
        getIndexFileAttachment: function(cb){
            if(typeof cb != "undefined" || cb!=null){
                console.log('get attachments');
                var attachment = dw.u.getDecodedAttach(copadoApp.data.Id,'index.json');
                if(attachment!=null){
                    cb && cb($copado.parseJSON(attachment.Body));
                }
            }
        },

        

        /**
         * Call this when you are sure that attachments are completed
         * Get index.json attachment
         * Build the file grid
         * Bind functional events: [select, show diff]
         * @return {[type]} [description]
         */
        initList: function(){
            //get json file list
            copadoApp.getIndexFileAttachment(copadoApp.renderFileList);
        },
        onSuccess: function(){
            //var d = new Date('{!NOW()}');
            //copadoApp.updateDeepDiff(d);
            copadoApp.initList();
        },
        /**
         * binding and initialization of front-end app
         * @param  {[type]} opt [description]
         * @return {[type]}     [description]
         */
        init: function(opt){
            var me = copadoApp;

            me.data.Id = opt.Id;

            if(opt.hasRun === "true"){
                $copado('#sectionDiv').show();
                me.initList();
                me.bind();
            }            
        },

        /**
         * get attachment, unzip content 
         * then search the file name (this must be full relative name)
         * finally returns file content as text
         * @param  {[type]} fileName   [description]
         * @param  {[type]} attachName [description]
         * @param  {[type]} parentId   [description]
         * @return {[type]}            [description]
         */
        getZippedFileContentByName: function(fileName,attachName,parentId){
            console.log('reading zip body: ' + attachName);
            var att = dw.u.getAttach(parentId,attachName);
            
            if(!att.length)return '';
            console.log('prepare ZIP file: ' + attachName);
            var zip = new JSZip(att[0].Body,{base64:true});
            console.log('reading zipped file body: ' + fileName + '@' + attachName);
            return zip.file(fileName).asText()
        },

        /**
         * This method should recober the source and destination zips
         * then uncompress it 
         * and finally call show detailed diff popup
         * @return {[type]} [description]
         */
        showDiff: function(){
            console.log('show diff started ...')
            lockScreen();
            $el = $copado(this);
            setTimeout(function(){copadoApp.retriveContent($el)},33);
        },

        /**
         * helper to avoid ui render engine freeze
         * @return {[type]} [description]
         */
        retriveContent: function($el){

            //recover file name from event
            var me = copadoApp;
            
            //recover first string from wrapper div
            fileName = $el.parent().text().replace(' Show Diff ','');

            //
            console.log('reading left side content ...');
            var leftContent  = me.getZippedFileContentByName(fileName,'source.zip',copadoApp.data.Id);
            console.log('reading right side content ...');
            var rigthContent = me.getZippedFileContentByName(fileName,'destination.zip',copadoApp.data.Id);
            console.log('rendering diff');
            me.renderDiff(leftContent,rigthContent);

        },

        renderDiff: function(l,r){
            console.log('start rendering...');
            var byId = function (id) { return document.getElementById(id); },
                baseText = difflib.stringAsLines(l),
                newText = difflib.stringAsLines(r),
                sm = new difflib.SequenceMatcher(baseText, newText),
                opcodes = sm.get_opcodes(),
                diffoutputdiv = $copado('#diff')[0];

            diffoutputdiv.innerHTML = '';
            console.log('drawing content...');
            diffoutputdiv.appendChild(diffview.buildView({
                baseTextLines: baseText,
                newTextLines: newText,
                opcodes: opcodes,
                baseTextName: 'Source Code',
                newTextName: 'Destination Code',
                contextSize: null,
                viewType: 0
            }));
            console.log('finished, unlocking screen...');
            unlockScreen();
        },


        hasSelectedItems: function(){

            if(!copadoApp.data.index) return false;

            var len = copadoApp.data.index.length;
            while(len--){
                if(copadoApp.data.index[len].s) return true;
            }

            return false;
            
        },

        /**
         * validate selected items 
         * lock ui
         * call remote heroku 
         * 
         * @param  {[type]} ev [description]
         * @return {[type]}    [description]
         */
        createDeployment: function(ev){
            ev.preventDefault();

            var me = copadoApp;

            //validate is possible
            if(!me.hasSelectedItems()){
                alert('You must to select at least one item before create a Deployment');
                return false;
            }

            lockScreen();

            //SET callback
            if(!me._createCallbackSet){

                me._createCallbackSet = true;

                console.log('adding callback')

                /*statusManager.addCallback('SnapshotDiffDeployment',function(res){
                    console.log('callback ', res);
                      //location.href = '/'+
                });*/
            }
            //remote calle
            /*utilsV2.onSuccessCB = function(res){
                console.log('remote cb', res);
                lockScreen();
                var obj = $copado.parseJSON(res);
                if(obj.copadoJobId){
                    statusManager.copadoJobId = obj.copadoJobId;
                    statusManager.startStatusChecker();
                }
            }
            var herokuServer = statusManager.herokuServer;
            var uri = herokuServer+'/json/v1/snapshotDeployment/'+copadoApp.data.Id+statusManager.urlParameters;
            console.log('call remote', uri)
            utilsV2.getRemote(uri);*/
            var herokuServer = statusManager.herokuServer;
            var uri = herokuServer+'/json/v1/snapshotDeployment/'+copadoApp.data.Id+statusManager.urlParameters;
            console.log('call remote', uri)
            
            dw.u.getRemote(uri,function(res){
                console.log('res success',res)
                
                location.href = '/'+res.deploymentId;
            },false,true, 
            function(res){
                console.error('Callback remote',res);
            });

            
        },

        /**
         * initialize binding of DOM elements
         * @return {[type]} [description]
         */
        bind: function(){

            //bind grid detail in delegation mode
            $copado('#fileGrid').unbind('click');// to prevent multiple bindings
            $copado('#fileGrid').on('click','.js-show-diff',copadoApp.showDiff);

            $copado('.js-createDeployment').on('click',copadoApp.createDeployment)

            //saving button
            $copado('.js-grid-save').on('click',copadoApp.saveGrid)
            console.log('bind');

        },
    };

    </script>
    </head>
    <c:ScreenLocker msg="{!$Label.copado__LOADING}" />
    <div id="body">
        <apex:sectionHeader id="sectionHeader" title="{!$ObjectType.copado__Snapshot_Difference__c.Label}" subtitle="{!IF(ISBLANK(copado__Snapshot_Difference__c.Name),$Label.copado__NEW+' '+$ObjectType.copado__Snapshot_Difference__c.Label, copado__Snapshot_Difference__c.Name)}" />

        <apex:form id="theForm">
        
            <apex:pageMessages />
            
            <apex:pageBlock id="pb_edit" rendered="{!isEdit}" mode="edit">
                <apex:pageblockButtons rendered="{!isSnapshotEnabled}">
                    <apex:commandButton value="{!$Label.site.save}" action="{!save}" />
                    <apex:commandButton value="{!$Label.site.cancel}" action="{!cancel}" immediate="true" />
                </apex:pageblockButtons>
                <apex:pageBlockSection id="pbes_pb1" columns="1">
                    <apex:inputField value="{!copado__Snapshot_Difference__c.Name}" required="true" />
                </apex:pageBlockSection>
                <apex:pageBlockSection id="pbes_pb2" columns="2">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Source Option" />
                        <apex:outputPanel >
                            <apex:inputField value="{!copado__Snapshot_Difference__c.copado__Source_Option__c}">
                                <apex:actionSupport event="onchange" action="{!doRerender}" reRender="theForm" status="sourceAction" />
                            </apex:inputField>
                            <apex:actionStatus id="sourceAction">
                                <apex:facet name="start"> <img src="/img/loading.gif" /></apex:facet>
                            </apex:actionStatus>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Destination Option" />
                        <apex:outputPanel >
                            <apex:inputField value="{!copado__Snapshot_Difference__c.copado__Destination_Option__c}">
                                <apex:actionSupport event="onchange" action="{!doRerender}" reRender="theForm" status="destinationAction" />
                            </apex:inputField>
                            <apex:actionStatus id="destinationAction">
                                <apex:facet name="start"> <img src="/img/loading.gif" /></apex:facet>
                            </apex:actionStatus>
                        </apex:outputPanel>
                    </apex:pageBlockSectionItem>
                    
                    <apex:inputField rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c='Git Commit'}" id="sourceCommit" value="{!copado__Snapshot_Difference__c.copado__Source_Git_Commit__c}" />
                    <apex:inputField rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c='Salesforce Org'}" id="sourceOrg" value="{!copado__Snapshot_Difference__c.copado__Source_Org_Credential__c}" />
                    <apex:outputPanel rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c=''}"></apex:outputPanel>
                    <apex:inputField rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c='Git Commit'}" id="destinationCommit" value="{!copado__Snapshot_Difference__c.copado__Destination_Git_Commit__c}" />
                    <apex:inputField rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c='Salesforce Org'}" id="destinationOrg" value="{!copado__Snapshot_Difference__c.copado__Destination_Org_Credential__c}" />
                    <apex:outputPanel rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c=''}"></apex:outputPanel>
                </apex:pageBlockSection>
            </apex:pageBlock>
            
            <apex:pageBlock rendered="{!NOT(isEdit)}">
                 <apex:pageblockButtons rendered="{!isSnapshotEnabled}">
                    <apex:commandButton value="{!$Label.site.edit}" action="{!edit}" />
                    <apex:commandButton value="{!$Label.copado__DELETE}" action="{!delete}" />
                    <input type="button" class="btn" value="Calculate Differences" onclick="copadoApp.runDeepDiff();return false;"/>
                    <apex:commandButton value="Create Deployment" styleClass="js-createDeployment" disabled="{!copado__Snapshot_Difference__c.copado__Destination_Option__c=''}"/>
                </apex:pageblockButtons>

                <apex:pageBlockSection id="pbds_pb1" columns="2">
                    <apex:outputField value="{!copado__Snapshot_Difference__c.Name}" />
                    <apex:outputField value="{!copado__Snapshot_Difference__c.copado__Last_Run__c}"  />
                </apex:pageBlockSection>
                    
                <apex:pageBlockSection id="pbds_pb2" columns="2">
                    <apex:outputField rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c='Git Commit'}" id="dsourceCommit" value="{!copado__Snapshot_Difference__c.copado__Source_Git_Commit__c}" />
                    <apex:outputField rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c='Salesforce Org'}" id="dsourceOrg" value="{!copado__Snapshot_Difference__c.copado__Source_Org_Credential__c}" />
                    <apex:outputPanel rendered="{!copado__Snapshot_Difference__c.copado__Source_Option__c=''}"></apex:outputPanel>
                    <apex:outputField rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c='Git Commit'}" id="ddestinationCommit" value="{!copado__Snapshot_Difference__c.copado__Destination_Git_Commit__c}" />
                    <apex:outputField rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c='Salesforce Org'}" id="ddestinationOrg" value="{!copado__Snapshot_Difference__c.copado__Destination_Org_Credential__c}" />
                    <apex:outputPanel rendered="{!copado__Snapshot_Difference__c.copado__Destination_Option__c=''}"></apex:outputPanel>
                </apex:pageBlockSection>
                
                <div id="sectionDiv" style="display:none;">
                <apex:pageBlockSection id="pbds_pb3" columns="1" title="File Diff" >
                    <div><center><button class="js-grid-save">{!$Label.site.save}</button></center></div>
                    <div id="fileGrid">
                    <center><i class="empty-msg">{!$Label.copado__LOADING}</i></center>
                    </div>
                    <div><center><button class="js-grid-save">{!$Label.site.save}</button></center></div>
                </apex:pageBlockSection>
                </div>
                <div id="diff" style="width:100%;"></div>

                <script type="text/javascript">
                    $copado(document).ready(function(){
                        copadoStreamingService.ns = '{!settings.namespace}';
                        copadoStreamingService.init();
                        //copadoStreamingService.subscribeCopadoNotifications(statusManager.readStream);
                        console.log('streaming services should be initialised...');
                        statusManager.ns = '{!settings.namespace}';
                        statusManager.herokuServer = '{!settings.herokuServer}';
                        statusManager.urlParameters = '{!settings.urlParameters}';
                        statusManager.sessionId = __sfdcSessionId;
                        statusManager.parentId = '{!Snapshot_Difference__c.Id}';
                        statusManager.initFunction = copadoApp.init({
                                    Id: '{!Snapshot_Difference__c.Id}',
                                    hasRun: '{!!ISBLANK(Snapshot_Difference__c.Last_Run__c)}'  
                                })
                        statusManager.successFunction = copadoApp.onSuccess;
                        window.onbeforeunload = copadoStreamingService.disconnect;
                        setTimeout(function(){
                            statusManager.initialise();
                        },2000);  
                    });
                </script>
            </apex:pageBlock>

        </apex:form>

        <apex:relatedList title="Snapshot Attachments" list="CombinedAttachments" rendered="false" />
    </div>
    <script>
        ga('send', 'pageview', {
          'page': '/SnapshotDifference',
          'title': 'Snapshot Difference'
        });
    </script>
    <c:CheckFeaturesComponent />
</apex:page>